#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('webrtc-chat-app:server');
var http = require('http');
const { Server } = require("socket.io");
var Fakerator = require("fakerator");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

const io = new Server(server, { cors: { origin: '*' }});
const users = {};

io.on('connection', (socket) => {
  console.log('a user connected');
  var fakerator = Fakerator();
  var fName = fakerator.names.firstName();
  var lName = fakerator.names.lastName();
  var name = fName + ' ' + lName;
  const userName = fakerator.internet.userName(fName, lName);

  if(!users[userName]){
    users[userName] = {id: socket.id, name, userName}
  }
  //send back username
  socket.emit('yourID', {userName: userName, ...users[userName]});
  io.sockets.emit('allUsers', users);
  
  socket.on('disconnect', ()=>{
    delete users[userName];
    io.sockets.emit('allUsers', users);
  });
  
  socket.on('callUser', (data)=>{
    io.to(users[data.userToCall].id).emit('hey', {signal: data.signalData, from: data.from})
  });
  
  socket.on('acceptCall', (data)=>{
    io.to(users[data.to].id).emit('callAccepted', data.signal)
  });
  
  socket.on('close', (data)=>{
    io.to(users[data.to].id).emit('close')
  });
  
  socket.on('rejected', (data)=>{
    io.to(users[data.to].id).emit('rejected')
  })
  
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);
  
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  
  if (port >= 0) {
    // port number
    return port;
  }
  
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  
  var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;
  
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
